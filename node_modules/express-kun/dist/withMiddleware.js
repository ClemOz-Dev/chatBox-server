"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
function isMiddlewareArray(middleware) {
    return Array.isArray(middleware);
}
function withMiddleware(router, middlewares) {
    var connectedMiddleware;
    if (isMiddlewareArray(middlewares)) {
        connectedMiddleware = middlewares;
    }
    else {
        connectedMiddleware = [middlewares];
    }
    var routeObject = {
        get: function (path) {
            var handlers = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                handlers[_i - 1] = arguments[_i];
            }
            router.get.apply(router, __spreadArrays([path], connectedMiddleware, handlers));
            return router;
        },
        post: function (path) {
            var handlers = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                handlers[_i - 1] = arguments[_i];
            }
            router.post.apply(router, __spreadArrays([path], connectedMiddleware, handlers));
            return router;
        },
        put: function (path) {
            var handlers = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                handlers[_i - 1] = arguments[_i];
            }
            router.put.apply(router, __spreadArrays([path], connectedMiddleware, handlers));
            return router;
        },
        delete: function (path) {
            var handlers = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                handlers[_i - 1] = arguments[_i];
            }
            router.delete.apply(router, __spreadArrays([path], connectedMiddleware, handlers));
            return router;
        }
    };
    // @ts-ignore
    return __assign(__assign({}, router), routeObject);
}
exports.default = withMiddleware;
