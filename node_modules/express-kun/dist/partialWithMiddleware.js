"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var express_1 = require("express");
function isMiddlewareArray(middleware) {
    return Array.isArray(middleware);
}
function isRouter(routerOrMiddleware) {
    return routerOrMiddleware instanceof express_1.Router;
}
function partialWithMiddleware(middlewares) {
    return function (routerOrMiddleware) {
        var connectedMiddleware;
        if (isMiddlewareArray(middlewares)) {
            connectedMiddleware = middlewares;
        }
        else {
            connectedMiddleware = [middlewares];
        }
        if (isRouter(routerOrMiddleware)) {
            var routeObject = {
                get: function (path) {
                    var handlers = [];
                    for (var _i = 1; _i < arguments.length; _i++) {
                        handlers[_i - 1] = arguments[_i];
                    }
                    routerOrMiddleware.get.apply(routerOrMiddleware, __spreadArrays([path], connectedMiddleware, handlers));
                    return routerOrMiddleware;
                },
                post: function (path) {
                    var handlers = [];
                    for (var _i = 1; _i < arguments.length; _i++) {
                        handlers[_i - 1] = arguments[_i];
                    }
                    routerOrMiddleware.post.apply(routerOrMiddleware, __spreadArrays([path], connectedMiddleware, handlers));
                    return routerOrMiddleware;
                },
                put: function (path) {
                    var handlers = [];
                    for (var _i = 1; _i < arguments.length; _i++) {
                        handlers[_i - 1] = arguments[_i];
                    }
                    routerOrMiddleware.put.apply(routerOrMiddleware, __spreadArrays([path], connectedMiddleware, handlers));
                    return routerOrMiddleware;
                },
                delete: function (path) {
                    var handlers = [];
                    for (var _i = 1; _i < arguments.length; _i++) {
                        handlers[_i - 1] = arguments[_i];
                    }
                    routerOrMiddleware.delete.apply(routerOrMiddleware, __spreadArrays([path], connectedMiddleware, handlers));
                    return routerOrMiddleware;
                }
            };
            // @ts-ignore
            return __assign(__assign({}, routerOrMiddleware), { routeObject: routeObject });
        }
        var reconnectedMiddleware;
        if (isMiddlewareArray(routerOrMiddleware)) {
            reconnectedMiddleware = routerOrMiddleware;
        }
        else {
            reconnectedMiddleware = [routerOrMiddleware];
        }
        return partialWithMiddleware(__spreadArrays(connectedMiddleware, reconnectedMiddleware));
    };
}
exports.default = partialWithMiddleware;
